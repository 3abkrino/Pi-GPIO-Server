{"name":"Pi GPIO Server","tagline":"A server for the Raspberry Pi with access to the digital GPIO pins via RESTful JSON and Socket.io","body":"After following the installation and configuration steps below, your Raspberry Pi will serve a single page demonstration app at: `http://your_raspberry_pi_hostname:5000/`.\r\n\r\n* Each pin defined as output will show up in the **controls** section with a button to toggle its state.\r\n* Each pin with an input event displays a message in the **events** section each time it is triggered.\r\n\r\n![GPIO server page](http://i.imgur.com/FEOoPHj.png)\r\n\r\n\r\n------------------------------------------------------------------------------\r\n\r\n### Installation & Setup\r\n\r\n------------------------------------------------------------------------------\r\n\r\n#### Step 1: Clone this repository\r\n\r\n```\r\ngit clone https://github.com/projectweekend/Pi-GPIO-Server.git\r\n```\r\n\r\n#### Step 2: Run install script\r\n\r\nFrom the project directory `Pi-GPIO-Server/`, run the following command:\r\n\r\n```\r\n./install.sh\r\n```\r\n\r\n**NOTE:** This step will probably take several minutes to complete. When the script starts to install [Upstart](http://upstart.ubuntu.com/), you will receive a warning message. It will prompt you to type the following message to confirm the installation: `Yes, do as I say!`. You must type it exactly.\r\n\r\n#### Step 3: Reboot\r\n\r\n```\r\nsudo reboot\r\n```\r\n\r\n\r\n------------------------------------------------------------------------------\r\n\r\n### Getting Started\r\n\r\n------------------------------------------------------------------------------\r\n\r\n#### Pin Configuration\r\n\r\nA config file `config/pins.yml` is used to define the initial setup for pins that will be accessible to the API. If a pin is not defined here it will not have a URL route in the API. For full documentation about available GPIO input pin configurations see the [documentation](http://sourceforge.net/p/raspberry-gpio-python/wiki/Examples/).\r\n\r\n```yaml\r\n18:\r\n  mode: OUT\r\n  initial: HIGH\r\n23:\r\n  mode: OUT\r\n  initial: LOW\r\n  resistor: PUD_DOWN\r\n24:\r\n  mode: IN\r\n  event: RISING\r\n  bounce: 200\r\n```\r\n\r\n* Add a numbered element for each pin to enabled\r\n* `mode` - This controls whether the pin will be used for input or output. Accepted values are: `IN`, `OUT`. (Required)\r\n* `initial` - This controls the starting value of the pin. Accepted values are: `LOW`, `HIGH`. (Optional - defaults to `LOW`)\r\n* `resistor` - This controls the software defined pull up/pull down resistor available in the Broadcom SOC. Accepted values are: `PUD_UP`, `PUD_DOWN`. (Optional - defaults to none)\r\n* `event` - This can only be used in combination with a pin set to input mode (`mode: IN`). If defined, the pin will use a socket.io connection and push data to the client when an event is detected. Accepted values are: `RISING`, `FALLING`, `BOTH`.\r\n* `bounce` - This can be used when an `event` is defined to prevent multiple callbacks being fired accidentally. The value is the number of milliseconds to wait before detecting another `event`.\r\n\r\n##### Note:\r\n\r\nAn example configuration file is included in this project. It defines:\r\n\r\n* **Pin 18** as an output pin\r\n* **Pin 23** as an input pin registered with a RISING event.\r\n\r\nUsing this configuration, all you need to do is wire a 1K resistor and LED to **pin 18**, and an button to **pin 23** to start using the demonstration app immediately.\r\n\r\n![Raspberry Pi Bread Board](http://i.imgur.com/zhLKQqW.jpg)\r\n\r\n##### Important:\r\n\r\nAfter making any change to `config/pins.yml`, you will need to restart the GPIO server to see those changes take affect. You can do this without rebooting:\r\n\r\n```\r\nsudo service gpio-server restart\r\n```\r\n\r\n\r\n------------------------------------------------------------------------------\r\n\r\n### JSON API\r\n\r\n------------------------------------------------------------------------------\r\n\r\n#### List enabled GPIO pins\r\n\r\n**GET:** `/api/v1/pin`\r\n\r\n**Response**\r\n\r\n```json\r\n[\r\n    {\r\n        \"initial\": null,\r\n        \"value\": 0,\r\n        \"resistor\": null,\r\n        \"num\": 18,\r\n        \"mode\": \"OUT\",\r\n        \"event\": null,\r\n        \"bounce\": 0\r\n    },\r\n    {\r\n        \"initial\": null,\r\n        \"value\": 0,\r\n        \"resistor\": null,\r\n        \"num\": 23,\r\n        \"mode\": \"IN\",\r\n        \"event\": \"RISING\",\r\n        \"bounce\": 200\r\n    },\r\n    ...\r\n]\r\n```\r\n\r\n#### Read a single pin\r\n\r\n**GET:** `/api/v1/pin/:num`\r\n\r\n**Response**\r\n\r\n```json\r\n{\r\n    \"initial\": null,\r\n    \"value\": 0,\r\n    \"resistor\": null,\r\n    \"num\": 18,\r\n    \"mode\": \"OUT\",\r\n    \"event\": null,\r\n    \"bounce\": 0\r\n}\r\n```\r\n\r\n#### Write to a single pin\r\n\r\n**PATCH:** `/api/v1/pin/:pin`\r\n\r\n**Body**\r\n\r\n```json\r\n{\r\n    \"value\": 0\r\n}\r\n```\r\n\r\n**Response**\r\n\r\n```json\r\n{\r\n    \"initial\": null,\r\n    \"value\": 0,\r\n    \"resistor\": null,\r\n    \"num\": 18,\r\n    \"mode\": \"OUT\",\r\n    \"event\": null,\r\n    \"bounce\": 0\r\n}\r\n```\r\n\r\n\r\n------------------------------------------------------------------------------\r\n\r\n### Socket.io\r\n\r\n------------------------------------------------------------------------------\r\n\r\n#### List enabled GPIO pins\r\n\r\n**Name:** `pin:list`\r\n\r\n**Example Client JavaScript**\r\n\r\n~~~javascript\r\nvar socket = io.connect( 'http://your_raspberry_pi.local' );\r\n\r\n// listen and receive data in the callback\r\nsocket.on( 'pin:list', function ( data ) {\r\n  // do something with data\r\n  console.log( data );\r\n} );\r\n\r\n// emit 'pin:list' to trigger a response with data\r\nsocket.emit( 'pin:list' );\r\n~~~\r\n\r\n#### Read a single pin\r\n\r\n**Name:** `pin:read`\r\n\r\n**Example Client JavaScript**\r\n\r\n~~~javascript\r\nvar socket = io.connect( 'http://your_raspberry_pi.local' );\r\n\r\n// listen and receive data in the callback\r\nsocket.on( 'pin:read', function ( data ) {\r\n  // do something with data\r\n  console.log( data );\r\n} );\r\n\r\n// emit 'pin:read' to trigger a response with data\r\nsocket.emit( 'pin:read', { num: 1 } );\r\n~~~\r\n\r\n#### Write to a single pin\r\n\r\n**Name:** `pin:write`\r\n\r\n**Example Client JavaScript**\r\n\r\n~~~javascript\r\nvar socket = io.connect( 'http://your_raspberry_pi.local' );\r\n\r\n// listen and receive data in the callback\r\nsocket.on( 'pin:write', function ( data ) {\r\n  // do something with data\r\n  console.log( data );\r\n} );\r\n\r\n// emit 'pin:write' to update a pin and trigger a response\r\nsocket.emit( 'pin:write', { num: 1, value: 0 } );\r\n~~~\r\n\r\n\r\n------------------------------------------------------------------------------\r\n\r\n### Events\r\n\r\n------------------------------------------------------------------------------\r\n\r\nEach pin `event` defined in `pins.yml` will push inormation to the client via socket.io. Data is sent on a named socket: `pin:event`.\r\n\r\n##### Example Socket.io Payload\r\n\r\n```json\r\n{\r\n  \"num\": 23,\r\n  \"event\": \"RISING\"\r\n}\r\n```\r\n\r\n##### Example Client JavaScript\r\n\r\n```javascript\r\nvar socket = io.connect( 'http://your_raspberry_pi.local' );\r\n\r\n// listen and receive data in the callback\r\nsocket.on( 'pin:event', function ( data ) {\r\n  // do something with data\r\n  console.log( data );\r\n} );\r\n```\r\n\r\n\r\n------------------------------------------------------------------------------\r\n\r\n### Upstart\r\n\r\n------------------------------------------------------------------------------\r\n\r\nThis project uses [Upstart](http://upstart.ubuntu.com/) to automatically start the GPIO web server when the Raspberry Pi boots. If you make changes to the server code in this project on your Raspberry Pi, you will need to restart the GPIO server in order for those changes to take affect. **This also includes changes made to the `pins.yml` config file.** If you want to do this without rebooting, you can use the following command:\r\n\r\n```\r\nsudo service gpio-server restart\r\n```\r\n\r\nIf for any reason you wish to stop the GPIO server from running you can use:\r\n\r\n```\r\nsudo service gpio-server stop\r\n```\r\n\r\nIf you want to start the GPIO server again, use:\r\n\r\n```\r\nsudo service gpio-server start\r\n```\r\n\r\n------------------------------------------------------------------------------\r\n\r\n### TODO\r\n\r\n------------------------------------------------------------------------------\r\n\r\n* Add support for I2C\r\n* Add support for SPI\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}